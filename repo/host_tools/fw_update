#!/usr/bin/python3 -u

# 2022 eCTF
# Update Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import json
import logging
from pathlib import Path
import socket
import struct
import math
from crypto import MAC_SIZE, NONCE_SIZE, PAGE_SIZE

from util import (
    print_banner,
    send_packets,
    RESP_OK,
    FIRMWARE_ROOT,
    LOG_FORMAT,
    MAX_FIRMWARE_SIZE,
    MAX_RELEASE_MSG_SIZE,
)

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def update_firmware(socket_number: int, firmware_file: Path):
    print_banner("SAFFIRe Firmware Update Tool")

    log.info("Reading firmware file...")
    with firmware_file.open("rb") as fw:
        data = json.load(fw)
        fw_size: int = data["firmware_size"]
        version_num: int = data["version_num"]
        release_msg: str = data["release_msg"]
        firmware = bytes.fromhex(data["firmware"])
        mac = bytes.fromhex(data["mac"])

    # The firmware is packed such that it is the NONCE followed by the actual payload
    # See fw_protect and crypto.py for more information
    enc_data_size = len(firmware) - NONCE_SIZE

    # Sanity checks
    num_page = math.ceil(enc_data_size / (PAGE_SIZE + MAC_SIZE))
    if fw_size != (enc_data_size - num_page * MAC_SIZE):
        log.warning("Tampered firmware! Aborting...")
        exit(1)

    # More Sanity checks:
    if len(release_msg) > MAX_RELEASE_MSG_SIZE:
        log.warning("Release message should be between 0 and 1024 bytes")
        exit(1)
    elif fw_size > MAX_FIRMWARE_SIZE:
        log.warning("Firmware is too large!")
        exit(1)
    elif version_num < 0 or version_num > 0xFFFF:
        log.warning("Invalid version number")
        exit(1)

    # Connect to the bootloader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(("saffire-net", socket_number))

        # Send update command
        log.info("Sending update command...")
        sock.send(b"U")

        # Receive bootloader acknowledgement
        log.info("Waiting for bootloader to enter update mode...")
        while sock.recv(1) != b"U":
            pass

        # Send the version, size, and release message
        log.info("Sending version, fw size, and release message...")
        payload = (
            mac
            + struct.pack(">HI", version_num, fw_size)
            + release_msg.encode()
            + b"\x00"
        )
        sock.send(payload)

        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")

        log.info(
            "Waiting for bootloader to perform version checks and updating pages..."
        )
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")

        # Send packets once all basic checks pass
        log.info("Sending firmware packets...")
        send_packets(sock, firmware)

        log.info("Waiting for bootloader to perform MAC...")
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")

        log.info("Firmware updated\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--firmware-file", help="Name of the firmware image to load.", required=True
    )

    args = parser.parse_args()

    firmware_file = FIRMWARE_ROOT / args.firmware_file

    update_firmware(args.socket, firmware_file)


if __name__ == "__main__":
    main()
